import asyncio
from langchain_mcp_adapters.client import MultiServerMCPClient
from settings import Settings
from model import GroqModel
from langgraph.prebuilt import create_react_agent

settings = Settings()

async def main():
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –∫–ª–∏–µ–Ω—Ç–∞...")

    client = MultiServerMCPClient({
        "demo": {
            "command": "python",
            "args": ["mcp_server.py"],
            "transport": "stdio",
        }
    })

    print("üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏–∑ MCP —Å–µ—Ä–≤–µ—Ä–∞...")
    tools = await client.get_tools()
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")

    print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏...")
    model = GroqModel()
    llm = model._init_model()
    
    
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞...")
    agent = create_react_agent(
        tools=tools,
        model=llm
    )

    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞...")
    result = agent.invoke({
        "messages": [{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫–∏–µ tools —É —Ç–µ–±—è –¥–æ—Å—Ç—É–ø–Ω—ã?"}]
    })
    print(f"ü§ñ –û—Ç–≤–µ—Ç: {result['messages'][-1].content}")

if __name__ == "__main__":
    asyncio.run(main())